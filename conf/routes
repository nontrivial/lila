# Run `./lila playRoutes` after modifying this file

# Lobby
GET   /                                controllers.Lobby.home
GET   /lobby/seeks                     controllers.Lobby.seeks

# Should be handled by nginx mostly
OPTIONS /                              controllers.Options.root
OPTIONS /*url                          controllers.Options.all(url: String)

# Timeline
GET   /timeline                        controllers.Timeline.home
POST  /timeline/unsub/:channel         controllers.Timeline.unsub(channel: String)

# Search
GET   /games/search                    controllers.Search.index(page: Int ?= 1)

# Game export
POST  /games/export/_ids               controllers.Game.exportByIds
GET   /games/export/:username          controllers.Game.exportByUser(username: String)

# Bookmark
POST  /bookmark/$gameId<\w{8}>         controllers.Game.bookmark(gameId: String)

# Relation
POST  /rel/follow/:userId              controllers.Relation.follow(userId: String)
POST  /rel/unfollow/:userId            controllers.Relation.unfollow(userId: String)
POST  /rel/block/:userId               controllers.Relation.block(userId: String)
POST  /rel/unblock/:userId             controllers.Relation.unblock(userId: String)
GET   /@/:username/following           controllers.Relation.following(username: String, page: Int ?= 1)
GET   /@/:username/followers           controllers.Relation.followers(username: String, page: Int ?= 1)
GET   /rel/blocks                      controllers.Relation.blocks(page: Int ?= 1)

# User subpages
GET   /@/:username/tournaments/:path   controllers.UserTournament.path(username: String, path: String, page: Int ?= 1)

# User
GET   /api/stream/:username/mod        controllers.User.mod(username: String)
POST  /@/:username/note                controllers.User.writeNote(username: String)
POST  /note/delete/:id                 controllers.User.deleteNote(id: String)
GET   /@/:username/mini                controllers.User.showMini(username: String)
GET   /@/:username/tv                  controllers.User.tv(username: String)
GET   /@/:username/perf/:perfKey       controllers.User.perfStat(username: String, perfKey: String)
GET   /@/:username/all                 controllers.User.gamesAll(username: String, page: Int ?= 1)
GET   /@/:username/download            controllers.User.download(username: String)
GET   /@/:username/:filterName         controllers.User.games(username: String, filterName: String, page: Int ?= 1)
GET   /@/:username                     controllers.User.show(username: String)
GET   /player/myself                   controllers.User.myself
GET   /player/opponents                controllers.User.opponents
GET   /player                          controllers.User.list
GET   /player/top/:nb/:perfKey         controllers.User.topNb(nb: Int, perfKey: String)
GET   /player/top/week                 controllers.User.topWeek
GET   /player/online                   controllers.User.online
GET   /player/autocomplete             controllers.User.autocomplete

GET   /dasher                          controllers.Dasher.get

# Round
GET   /$gameId<\w{8}>                            controllers.Round.watcher(gameId: String, color: String = "white")
GET   /$gameId<\w{8}>/$color<white|black>        controllers.Round.watcher(gameId: String, color: String)
GET   /$fullId<\w{12}>                           controllers.Round.player(fullId: String)
GET   /$gameId<\w{8}>/$color<white|black>/sides  controllers.Round.sides(gameId: String, color: String)
GET   /$gameId<\w{8}>/continue/:mode             controllers.Round.continue(gameId: String, mode: String)
GET   /$gameId<\w{8}>/note                       controllers.Round.readNote(gameId: String)
POST  /$gameId<\w{8}>/note                       controllers.Round.writeNote(gameId: String)
GET   /$gameId<\w{8}>/mini                       controllers.Round.mini(gameId: String, color: String = "white")
GET   /$gameId<\w{8}>/$color<white|black>/mini   controllers.Round.mini(gameId: String, color: String)
GET   /$fullId<\w{12}>/mini                      controllers.Round.miniFullId(fullId: String)
GET   /$gameId<\w{8}>/edit                       controllers.Editor.game(gameId: String)
POST  /$fullId<\w{12}>/resign                    controllers.Round.resign(fullId: String)

POST  /$gameId<\w{8}>/delete                     controllers.Game.delete(gameId: String)

GET   /round-next/$gameId<\w{8}>                 controllers.Round.next(gameId: String)
GET   /whats-next/$fullId<\w{12}>                controllers.Round.whatsNext(fullId: String)

# Tournament
GET   /tournament                             controllers.Tournament.home
GET   /tournament/featured                    controllers.Tournament.featured
GET   /tournament/new                         controllers.Tournament.form
POST  /tournament/new                         controllers.Tournament.create
GET   /tournament/team-battle/new/:teamId     controllers.Tournament.teamBattleForm(teamId: String)
GET   /tournament/team-battle/edit/:id        controllers.Tournament.teamBattleEdit(id: String)
POST  /tournament/team-battle/edit/:id        controllers.Tournament.teamBattleUpdate(id: String)
GET   /tournament/calendar                    controllers.Tournament.calendar
GET   /tournament/history                     controllers.Tournament.history(freq: String = "unique", page: Int ?= 1)
GET   /tournament/history/:freq               controllers.Tournament.history(freq: String, page: Int ?= 1)
GET   /tournament/$id<\w{8}>                  controllers.Tournament.show(id: String)
GET   /tournament/$id<\w{8}>/standing/:page   controllers.Tournament.standing(id: String, page: Int)
GET   /tournament/$id<\w{8}>/page-of/:userId  controllers.Tournament.pageOf(id: String, userId: String)
POST  /tournament/$id<\w{8}>/join             controllers.Tournament.join(id: String)
POST  /tournament/$id<\w{8}>/withdraw         controllers.Tournament.pause(id: String)
GET   /tournament/$id<\w{8}>/player/:user     controllers.Tournament.player(id: String, user: String)
GET   /tournament/$id<\w{8}>/team/:team       controllers.Tournament.teamInfo(id: String, team: String)
POST  /tournament/$id<\w{8}>/terminate        controllers.Tournament.terminate(id: String)
GET   /tournament/$id<\w{8}>/edit             controllers.Tournament.edit(id: String)
POST  /tournament/$id<\w{8}>/edit             controllers.Tournament.update(id: String)
GET   /tournament/$id<\w{8}>/teams            controllers.Tournament.battleTeams(id: String)
GET   /tournament/help                        controllers.Tournament.help(system: Option[String] ?= None)
GET   /tournament/leaderboard                 controllers.Tournament.leaderboard
GET   /tournament/shields                     controllers.Tournament.shields
GET   /tournament/shields/:categ              controllers.Tournament.categShields(categ: String)

# Tournament CRUD
GET   /tournament/manager                     controllers.TournamentCrud.index(page: Int ?= 1)
GET   /tournament/manager/clone/$id<\w{8}>    controllers.TournamentCrud.cloneT(id: String)
GET   /tournament/manager/$id<\w{8}>          controllers.TournamentCrud.edit(id: String)
POST  /tournament/manager/$id<\w{8}>          controllers.TournamentCrud.update(id: String)
GET   /tournament/manager/new                 controllers.TournamentCrud.form
POST  /tournament/manager                     controllers.TournamentCrud.create

# Pref
POST  /pref/:name                             controllers.Pref.set(name: String)
GET   /account/preferences/:categ             controllers.Pref.form(categ: String)
POST  /account/preferences                    controllers.Pref.formApply

# Setup
GET   /setup/ai                        controllers.Setup.aiForm
POST  /setup/ai                        controllers.Setup.ai
GET   /setup/friend                    controllers.Setup.friendForm(user: Option[String] ?= None)
POST  /setup/friend                    controllers.Setup.friend(user: Option[String] ?= None)
GET   /setup/hook                      controllers.Setup.hookForm
POST  /setup/hook/:sri/like/:gameId    controllers.Setup.like(sri: String, gameId: String)
POST  /setup/hook/:sri                 controllers.Setup.hook(sri: String)
GET   /setup/filter                    controllers.Setup.filterForm
GET   /setup/validate-fen              controllers.Setup.validateFen

# Notify
GET /notify                            controllers.Notify.recent(page: Int ?= 1)

# Video
GET   /video                           controllers.Video.index
GET   /video/tags                      controllers.Video.tags
GET   /video/author/:author            controllers.Video.author(author: String)
GET   /video/:id                       controllers.Video.show(id: String)

# I18n
POST  /translation/select              controllers.I18n.select

# Authentication
GET   /login                           controllers.Auth.login
POST  /login                           controllers.Auth.authenticate
GET   /logout                          controllers.Auth.logoutGet
POST  /logout                          controllers.Auth.logout
GET   /signup                          controllers.Auth.signup
POST  /signup                          controllers.Auth.signupPost
GET   /signup/check-your-email         controllers.Auth.checkYourEmail
POST  /signup/fix-email                controllers.Auth.fixEmail
GET   /signup/confirm/:token           controllers.Auth.signupConfirmEmail(token: String)
GET   /password/reset                  controllers.Auth.passwordReset
POST  /password/reset/send             controllers.Auth.passwordResetApply
GET   /password/reset/sent/:email      controllers.Auth.passwordResetSent(email: String)
GET   /password/reset/confirm/:token   controllers.Auth.passwordResetConfirm(token: String)
POST  /password/reset/confirm/:token   controllers.Auth.passwordResetConfirmApply(token: String)
POST  /auth/set-fp/:fp/:ms             controllers.Auth.setFingerPrint(fp: String, ms: Int)
POST  /auth/token                      controllers.Auth.makeLoginToken
GET   /auth/token/:token               controllers.Auth.loginWithToken(token: String)
POST  /auth/token/:token               controllers.Auth.loginWithTokenPost(token: String, referrer: Option[String])
GET   /auth/magic-link                 controllers.Auth.magicLink
POST  /auth/magic-link/send            controllers.Auth.magicLinkApply
GET   /auth/magic-link/sent/:email     controllers.Auth.magicLinkSent(email: String)
GET   /auth/magic-link/login/:token    controllers.Auth.magicLinkLogin(token: String)

# Msg compat
POST  /inbox/new                       controllers.Msg.compatCreate
# Msg
GET   /inbox                           controllers.Msg.home
GET   /inbox/search                    controllers.Msg.search(q: String)
GET   /inbox/unread-count              controllers.Msg.unreadCount
GET   /inbox/:username                 controllers.Msg.convo(username: String, before: Option[Long] ?= None)
DELETE /inbox/:username                controllers.Msg.convoDelete(username: String)
# Msg API/compat
POST  /inbox/:username                 controllers.Msg.apiPost(username: String)
POST /inbox/:username/delete           controllers.Msg.convoDelete(username: String)

# DB image

# Paste
GET   /paste                           controllers.Importer.importGame
POST  /import                          controllers.Importer.sendGame
GET   /import/master/$id<\w{8}>/:color controllers.Importer.masterGame(id: String, color: String)

# Edit
GET   /editor.json                     controllers.Editor.data
GET   /editor/*urlFen                  controllers.Editor.load(urlFen: String)
GET   /editor                          controllers.Editor.inde

# Stats
GET    /stat/rating/distribution/:perf controllers.Stat.ratingDistribution(perf: String)

# Account
GET   /account/passwd                  controllers.Account.passwd
POST  /account/passwd                  controllers.Account.passwdApply
GET   /account/email                   controllers.Account.email
POST  /account/email                   controllers.Account.emailApply
GET   /contact/email-confirm/help      controllers.Account.emailConfirmHelp
GET   /account/email/confirm/:token    controllers.Account.emailConfirm(token: String)
GET   /account/close                   controllers.Account.close
POST  /account/closeConfirm            controllers.Account.closeConfirm
GET   /account/profile                 controllers.Account.profile
POST  /account/profile                 controllers.Account.profileApply
GET   /account/username                controllers.Account.username
POST  /account/username                controllers.Account.usernameApply
GET   /account/kid                     controllers.Account.kid
POST  /account/kid                     controllers.Account.kidPost
GET   /account/twofactor               controllers.Account.twoFactor
POST  /account/twofactor/setup         controllers.Account.setupTwoFactor
POST  /account/twofactor/disable       controllers.Account.disableTwoFactor
GET   /account/reopen                  controllers.Account.reopen
POST  /account/reopen/send             controllers.Account.reopenApply
GET   /account/reopen/sent/:email      controllers.Account.reopenSent(email: String)
GET   /account/reopen/login/:token     controllers.Account.reopenLogin(token: String)
GET   /account/personal-data           controllers.Account.data
# App BC
GET   /account/security                controllers.Account.security
POST  /account/signout/:sessionId      controllers.Account.signout(sessionId: String)
GET   /account/info                    controllers.Account.info
GET   /account/now-playing             controllers.Account.nowPlaying

# OAuth
GET    /oauth                                controllers.OAuth.authorize
POST   /oauth                                controllers.OAuth.legacyTokenApply
GET    /oauth/authorize                      controllers.OAuth.legacyAuthorize
POST   /oauth/authorize                      controllers.OAuth.authorizeApply
POST   /oauth/revoke-client                  controllers.OAuth.revokeClient
POST   /api/token                            controllers.OAuth.tokenApply
DELETE /api/token                            controllers.OAuth.tokenRevoke
GET    /account/oauth/token                  controllers.OAuthToken.index
GET    /account/oauth/token/create           controllers.OAuthToken.create
POST   /account/oauth/token/create           controllers.OAuthToken.createApply
POST   /account/oauth/token/:publicId/delete controllers.OAuthToken.delete(publicId: String)
GET    /account/oauth/app                    controllers.OAuthApp.index
POST   /account/oauth/app/:id/delete         controllers.OAuthApp.delete(id: String)
POST   /account/oauth/app/:id/revoke         controllers.OAuthApp.revoke(id: String)

# Events
GET   /event/$id<\w{8}>                controllers.Event.show(id: String)
GET   /event/manager                   controllers.Event.manager
GET   /event/manager/$id<\w{8}>        controllers.Event.edit(id: String)
POST  /event/manager/$id<\w{8}>        controllers.Event.update(id: String)
GET   /event/manager/clone/$id<\w{8}>  controllers.Event.cloneE(id: String)
GET   /event/manager/new               controllers.Event.form
POST  /event/manager                   controllers.Event.create

# Push
POST  /mobile/register/:platform/:deviceId controllers.Push.mobileRegister(platform: String, deviceId: String)
POST  /mobile/unregister               controllers.Push.mobileUnregister
POST  /push/subscribe                  controllers.Push.webSubscribe

POST  /jslog/$id<\w{12}>               controllers.Main.jslog(id: String)
POST  /jsmon/:event                    controllers.Main.jsmon(event: String)

GET   /assets/_$v<\w{6}>/*file         controllers.Main.devAsset(v, path="public", file)
GET   /assets/*file                    controllers.ExternalAssets.at(path="public", file)

GET   /manifest.json                   controllers.Main.manifest
GET   /robots.txt                      controllers.Main.robots

GET   /$username<\w{2,30}>             controllers.User.redirect(username: String)
